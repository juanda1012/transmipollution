import { Button, Carousel, Form, Image, InputNumber } from "antd";
import Head from "next/head";
import { useRouter } from "next/router";
import React, { useEffect, useRef, useState } from "react";
import Footer from "../components/Footer";
import Map from "../components/Mapa";
import NavBar from "../components/NavBar";
import enData from "../data/en/index.json";
import esData from "../data/es/index.json";
import useLang from "../Providers/LangContext";

const Home = (props) => {
  const { places } = props;
  const softwareRef = useRef(null);
  const topRef = useRef(null);
  const [lang] = useLang();
  const [indexData, setIndexData] = useState(esData);
  const router = useRouter();
  const [result, setResult] = useState();

  useEffect(() => {
    if (lang === "ES") {
      setIndexData(esData);
    } else if (lang === "EN") {
      setIndexData(enData);
    }
  }, [lang]);

  const onFinish = (data) => {
    const { C, Cinf, Csup, ICAinf, ICAsup } = data;
    setResult(((ICAsup - ICAinf) / (Csup - Cinf)) * (C - Cinf) + ICAinf);
  };

  return (
    <>
      <Head>
        <title>Transmi App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/icon.ico" />
      </Head>
      <NavBar scroll={{ softwareRef, topRef }} />
      <main className="mainContent" ref={topRef}>
        <Carousel className="carouselContainer" effect="fade">
          <div className="carouselImage">
            <Image preview={false} src="/Slider/1.jpeg" />
          </div>

          <div className="carouselImage">
            <Image preview={false} src="/Slider/2.jpeg" />
          </div>

          <div className="carouselImage">
            <Image preview={false} src="/Slider/3.jpeg" />
          </div>
        </Carousel>

        <div className="MapContainer">
          <h2>{lang === "ES" ? "Estaciones" : "Stations"}</h2>
          <p>
            {lang === "ES" ? "Fuente:" : "Source:"} TRANSMILENIO S.A:
            www.transmilenio.gov.co
          </p>
          {places && <Map places={places} />}
        </div>
        <div className="additionalContainer">
          <h2>{indexData.pollution.name}</h2>
          <p>{indexData.pollution.info}</p>
        </div>
        <div className="info__head" ref={softwareRef}>
          <h2>{lang === "ES" ? "Información" : "Information"}</h2>
        </div>

        <div className="infoContainer">
          <div className="info__item">
            <Image className="card__image" preview={false} src="/b.jpeg" />
            <div className="card__info">
              <h2 className="card__title">{indexData.topic.name}</h2>
              <p className="card__data">{indexData.topic.info}</p>
            </div>
          </div>
          <div className="info__item">
            <Image className="card__image" preview={false} src="/a.jpeg" />
            <div className="card__info">
              <h2
                className="card__title card__link"
                onClick={() => router.push("/stations")}
              >
                {indexData.software.name}
              </h2>
              <p className="card__data">{indexData.software.info}</p>
            </div>
          </div>
        </div>
        <div className="calculateQuality">
          <div className="info">
            <h2>
              {lang === "ES"
                ? "Calcula la calidad del aire"
                : "Calculate air quality"}
            </h2>
            <p>
              {lang === "ES"
                ? "Usa la información de la tabla para realizar el cálculo"
                : "Use the information in the table to perform the calculation"}
            </p>
          </div>
          <Image className="table__image" src="/table.jpg" />
          <div className="info">
            <p>
              {lang === "ES"
                ? "Fórmula para el cálculo"
                : "Formula for calculation"}
            </p>
            <Image
              className="table__image"
              src="/calculoica.jpeg"
              preview={false}
            />

            <p>
              <b>{lang === "ES" ? "Donde:" : "Where:"}</b>
            </p>
            <p>
              ICA ={" "}
              {lang === "ES"
                ? "Índice de Calidad del Aire"
                : "Air Quality Index"}
            </p>
            <p>
              ICA sup ={" "}
              {lang === "ES"
                ? "Valor ICA superior del intervalo donde se encuentra la concentración analizada"
                : "Higher ICA value of the interval where the analyzed concentration is found"}
            </p>
            <p>
              ICA inf ={" "}
              {lang === "ES"
                ? "Valor ICA inferior del intervalo donde se encuentra la concentración analizada"
                : "Lower ICA value of the interval where the analyzed concentration is found"}
            </p>
            <p>
              C sup ={" "}
              {lang === "ES"
                ? "Valor de la concentración superior del intervalo donde se encuentra la concentración analizada"
                : "Value of the upper concentration of the interval where the analyzed concentration is found"}
            </p>
            <p>
              C inf ={" "}
              {lang === "ES"
                ? "Valor de la concentración inferior del intervalo donde se encuentra la concentración analizada"
                : "Value of the lower concentration of the interval where the analyzed concentration is found"}
            </p>
            <p>
              C ={" "}
              {lang === "ES"
                ? "Concentración analizada"
                : "Concentration analyzed"}
            </p>
          </div>

          <Form onFinish={onFinish} className="form">
            <Form.Item
              name="ICAsup"
              label={"ICA sup"}
              rules={[
                {
                  required: true,
                  message: lang === "ES" ? "Requerido" : "Required",
                },
              ]}
            >
              <InputNumber />
            </Form.Item>
            <Form.Item
              name="ICAinf"
              label={"ICA inf"}
              rules={[
                {
                  required: true,
                  message: lang === "ES" ? "Requerido" : "Required",
                },
              ]}
            >
              <InputNumber />
            </Form.Item>
            <Form.Item
              name="Csup"
              label={"C sup"}
              rules={[
                {
                  required: true,
                  message: lang === "ES" ? "Requerido" : "Required",
                },
              ]}
            >
              <InputNumber />
            </Form.Item>
            <Form.Item
              name="Cinf"
              label={"C inf"}
              rules={[
                {
                  required: true,
                  message: lang === "ES" ? "Requerido" : "Required",
                },
              ]}
            >
              <InputNumber />
            </Form.Item>
            <Form.Item
              name="C"
              label={"C"}
              rules={[
                {
                  required: true,
                  message: lang === "ES" ? "Requerido" : "Required",
                },
              ]}
            >
              <InputNumber />
            </Form.Item>

            <Form.Item className="button">
              <Button type="primary" htmlType="submit">
                {lang === "ES" ? "Calcular" : "Calculate"}
              </Button>
            </Form.Item>
          </Form>
          {result && (
            <div>
              {lang === "ES" ? <b>Resultado: </b> : <b>Result: </b>}
              {Math.round(result * 100) / 100}
            </div>
          )}
        </div>
      </main>
      <Footer />
    </>
  );
};

export default React.memo(Home);

export const getStaticProps = async () => {
  const url =
    "https://gis.transmilenio.gov.co/arcgis/rest/services/Troncal/consulta_estaciones_troncales/MapServer/1/query?where=1%3D1&outFields=nombre_estacion,ubicacion_estacion&outSR=4326&f=json";
  const resp = await fetch(url);
  const { features } = await resp.json();
  return {
    props: {
      places: features,
    },
  };
};
